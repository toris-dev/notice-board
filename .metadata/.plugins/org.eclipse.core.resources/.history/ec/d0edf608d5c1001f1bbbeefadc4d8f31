<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="egovframework.example.sample.service.impl.PostMapper">

    <!-- Post 결과 매핑 -->
    <resultMap id="postResultMap" type="egovframework.example.sample.service.PostVO">
        <result property="postId" column="post_id"/>
        <result property="title" column="title"/>
        <result property="content" column="content"/>
        <result property="createdAt" column="created_at"/>
        <result property="updatedAt" column="updated_at"/>
        <result property="authorId" column="author_id"/>
        <result property="comments" column="post_id" select="selectCommentsByPostId"/>
    </resultMap>

    <!-- Comment 결과 매핑 -->
    <resultMap id="commentResultMap" type="egovframework.example.sample.service.CommentVO">
        <result property="commentId" column="comment_id"/>
        <result property="postId" column="post_id"/>
        <result property="content" column="content"/>
        <result property="createdAt" column="created_at"/>
        <result property="authorId" column="author_id"/>
        <result property="replyComment" column="reply_comment"/>
        <result property="count" column="count"/>
    </resultMap>

    <!-- 게시글 삽입 -->
    <insert id="insertPost" parameterType="PostVO">
        INSERT INTO POST
        (post_id, title, content, created_at, updated_at, author_id)
        VALUES
        (#{postId}, #{title}, #{content}, #{createdAt}, #{updatedAt}, #{authorId})
    </insert>

    <!-- 게시글 조회 -->
    <select id="selectPost" resultMap="postResultMap">
        SELECT
            post_id, title, content, created_at, updated_at, author_id
        FROM POST
        WHERE post_id = #{postId}
    </select>

    <!-- 게시글 리스트 조회 -->
    <select id="selectPostList" parameterType="PostListVO" resultMap="postResultMap">
        SELECT
            post_id, title, content, created_at, updated_at, author_id
        FROM POST
        WHERE 1=1
        <if test="searchKeyword != null and searchKeyword != ''">
            <choose>
                <when test="searchCondition == 0">
                    AND title LIKE '%' || #{searchKeyword} || '%'
                </when>
                <when test="searchCondition == 1">
                    AND content LIKE '%' || #{searchKeyword} || '%'
                </when>
            </choose>
        </if>
        ORDER BY created_at DESC
        LIMIT #{recordCountPerPage} OFFSET #{firstIndex}
    </select>

    <!-- 게시글 총 개수 조회 -->
    <select id="selectPostListTotCnt" parameterType="PostListVO" resultType="int">
        SELECT COUNT(*) 
        FROM POST
        WHERE 1=1
        <if test="searchKeyword != null and searchKeyword != ''">
            <choose>
                <when test="searchCondition == 0">
                    AND title LIKE '%' || #{searchKeyword} || '%'
                </when>
                <when test="searchCondition == 1">
                    AND content LIKE '%' || #{searchKeyword} || '%'
                </when>
            </choose>
        </if>
    </select>

    <!-- 댓글 삽입 -->
    <insert id="insertComment" parameterType="CommentVO">
        INSERT INTO COMMENT
        (comment_id, post_id, content, created_at, author_id)
        VALUES
        (#{commentId}, #{postId}, #{content}, #{createdAt}, #{authorId})
    </insert>

    <!-- 댓글 조회 -->
    <select id="selectComment" resultMap="commentResultMap">
        SELECT
            comment_id, post_id, content, created_at, author_id
        FROM COMMENT
        WHERE comment_id = #{commentId}
    </select>

    <!-- 게시글의 댓글 목록 조회 -->
    <select id="selectCommentsByPostId" parameterType="String" resultMap="commentResultMap">
        SELECT
            comment_id, post_id, content, created_at, author_id, reply_comment, count
        FROM COMMENT
        WHERE post_id = #{postId}
        ORDER BY created_at DESC
    </select>

    <!-- 댓글 수정 -->
    <update id="updateComment" parameterType="CommentVO">
        UPDATE COMMENT
        SET content = #{content}, updated_at = #{updatedAt}
        WHERE comment_id = #{commentId} AND author_id = #{authorId}
    </update>

    <!-- 댓글 삭제 -->
    <delete id="deleteComment" parameterType="String">
        DELETE FROM COMMENT
        WHERE comment_id = #{commentId}
    </delete>

</mapper>
